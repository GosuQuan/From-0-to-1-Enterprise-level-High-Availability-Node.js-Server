name: Node.js CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js 18
      uses: actions/setup-node@v3
      with:
        node-version: 18
    
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
    
    - name: Get pnpm store directory
      id: pnpm-cache
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
    
    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/package.json') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
    
    - name: Install dependencies
      run: pnpm install --no-frozen-lockfile --registry=https://registry.npmmirror.com
      
    # - name: Run tests
    #   run: pnpm test
      
  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Build and push
      uses: docker/build-push-action@v3
      with:
        push: true
        tags: gosuquan/node-test:latest
        cache-from: type=registry,ref=gosuquan/node-test:buildcache
        cache-to: type=inline
    
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
    - name: SSH into server and deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |2
          # 检查 Docker 是否安装
          if ! command -v docker &> /dev/null; then
            echo "Docker 未安装，正在安装..."
            # 安装 Docker
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io
            # 将当前用户添加到 docker 组
            sudo usermod -aG docker $USER
            # 重新加载 shell 以使用户组变更生效
            newgrp docker
          fi
          
          # 配置 Docker 使用国内镜像源
          echo "配置 Docker 镜像加速..."
          sudo mkdir -p /etc/docker
          echo '{"registry-mirrors":["https://registry.docker-cn.com","https://hub-mirror.c.163.com","https://mirror.baidubce.com"]}' | sudo tee /etc/docker/daemon.json
          
          # 重启 Docker 服务
          sudo systemctl daemon-reload
          sudo systemctl restart docker
          
          # 离线部署方案，处理完全无法连接互联网的情况
          echo "准备部署应用..."
          
          # 创建应用目录
          mkdir -p ~/app
          
          # 使用 scp 将当前构建的代码直接传输到服务器
          # 这一步在 GitHub Actions 中已经完成，因为我们已经在服务器上
          
          # 检查是否有本地镜像
          if docker images | grep -q 'gosuquan/node-test'; then
            echo "找到现有镜像，将使用它来部署..."
          else
            echo "未找到现有镜像，尝试使用 Dockerfile 直接运行应用..."
            
            # 如果无法构建 Docker 镜像，就直接使用 Node.js 运行应用
            if command -v node &> /dev/null; then
              echo "找到 Node.js，将直接运行应用..."
              # 检查是否已安装 pnpm
              if ! command -v pnpm &> /dev/null; then
                echo "安装 pnpm..."
                npm install -g pnpm
              fi
              
              # 检查是否已安装 PM2
              if ! command -v pm2 &> /dev/null; then
                echo "安装 PM2..."
                npm install -g pm2
              fi
              
              # 如果有代码仓库，使用它
              cd ~/app
              if [ -d "src" ]; then
                echo "安装依赖..."
                pnpm install --no-frozen-lockfile
                
                # 停止现有进程
                pm2 stop node-test || true
                
                # 启动应用
                echo "启动应用..."
                NODE_ENV=production pm2 start src/index.js --name node-test
                
                # 返回成功
                echo "应用直接启动成功！"
                pm2 status
                exit 0
              fi
            fi
            
            # 如果上面的方法都失败，尝试使用本地 Dockerfile 构建
            cd ~/app
            if [ -f "Dockerfile" ]; then
              echo "尝试使用本地 Dockerfile 构建..."
              # 使用 --network=host 可能帮助解决一些网络问题
              docker build --network=host -t gosuquan/node-test:latest .
            else
              echo "未找到 Dockerfile，无法构建镜像。"
              exit 1
            fi
          fi
          
          echo "停止并移除旧容器..."
          docker stop node-test || true
          docker rm node-test || true
          
          echo "启动新容器..."
          docker run -d \
            --name node-test \
            --restart unless-stopped \
            -p 3000:3000 \
            -e NODE_ENV=production \
            -e DB_HOST=${{ secrets.DB_HOST }} \
            gosuquan/node-test:latest
          
          echo "部署完成！"
          docker ps | grep node-test